name: Build FFmpeg
on:
  schedule:
    - cron: '7 11 * * 0'
  workflow_dispatch:
    inputs:
      force_build:
        description: Disable checking for newer commit
        type: boolean
      no_release:
        description: Don't create release
        type: boolean
      use_own_fork:
        description: Use own ffmpeg-windows-build-helpers fork
        type: boolean
  watch:
    types: [started]

concurrency:
  group: ${{ github.workflow }}

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Get FFmpeg latest commit
        id: ffmpeg-info
        run: |
          git_sha=$(gh api repos/FFmpeg/FFmpeg/commits/master -q .sha)
          echo git-sha=$git_sha >> $GITHUB_OUTPUT
          echo git-sha-short=${git_sha::7} >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.TOKEN_REPO }}

      - name: Get ${{ inputs.use_own_fork && github.repository_owner || 'xdeadboy666x' }}/ffmpeg-windows-build-helpers latest commit
        id: ffmpeg-helper-info
        run: |
          git_owner=${{ inputs.use_own_fork && github.repository_owner || 'xdeadboy666x' }}
          git_sha=$(gh api repos/$git_owner/ffmpeg-windows-build-helpers/commits/master -q .sha)
          echo git-owner=$git_owner >> $GITHUB_OUTPUT
          echo git-sha=$git_sha >> $GITHUB_OUTPUT
          echo git-sha-short=${git_sha::7} >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.TOKEN_REPO }}

      - name: Get ffmpeg-autobuild latest build
        id: ffmpeg-autobuild-info
        run: |
          tag_name=$(gh api repos/$GITHUB_REPOSITORY/releases/latest -q .tag_name || echo "none")
          if [ "$tag_name" != "none" ]; then
            echo git-sha=${tag_name:17:7} >> $GITHUB_OUTPUT
            echo helper-git-sha=${tag_name:25:7} >> $GITHUB_OUTPUT
          else
            echo "No releases found"
            echo git-sha="none" >> $GITHUB_OUTPUT
            echo helper-git-sha="none" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.TOKEN_REPO }}

      - name: Check if there is newer commit
        if: "! inputs.force_build"
        run: |
          [[ "${{ steps.ffmpeg-info.outputs.git-sha-short }}" != "${{ steps.ffmpeg-autobuild-info.outputs.git-sha }}" ]] ||
          [[ "${{ steps.ffmpeg-helper-info.outputs.git-sha-short }}" != "${{ steps.ffmpeg-autobuild-info.outputs.helper-git-sha }}" ]]
          
    outputs:
      git-sha: ${{ steps.ffmpeg-info.outputs.git-sha }}
      git-sha-short: ${{ steps.ffmpeg-info.outputs.git-sha-short }}
      helper-git-owner: ${{ steps.ffmpeg-helper-info.outputs.git-owner }}
      helper-git-sha: ${{ steps.ffmpeg-helper-info.outputs.git-sha }}
      helper-git-sha-short: ${{ steps.ffmpeg-helper-info.outputs.git-sha-short }}

  build:
    needs: check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [win64]

    steps:
      - name: Restore cached cross-compilers
        uses: actions/cache@v4
        with:
          path: ./sandbox/cross_compilers
          key: cross-compilers-cache-${{ matrix.os }}-${{ needs.check.outputs.git-sha }}
          restore-keys: cross-compilers-cache-${{ matrix.os }}-

      - name: Restore cached libraries
        uses: actions/cache@v4
        with:
          path: ./sandbox/libs
          key: libraries-cache-${{ matrix.os }}-${{ needs.check.outputs.git-sha }}
          restore-keys: libraries-cache-${{ matrix.os }}-

      - name: Checkout ${{ needs.check.outputs.helper-git-owner }}/ffmpeg-windows-build-helpers
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.check.outputs.helper-git-owner }}/ffmpeg-windows-build-helpers
          ref: ${{ needs.check.outputs.helper-git-sha }}
          persist-credentials: false

      - name: Checkout FFmpeg
        uses: actions/checkout@v4
        with:
          repository: FFmpeg/FFmpeg
          ref: ${{ needs.check.outputs.git-sha }}
          persist-credentials: false
          path: ffmpeg-source

      - name: Install dependencies
        run: sudo pip3 -qq install setuptools meson ninja

      - name: Compile FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install subversion ragel curl texinfo g++ ed libva-dev bison flex cvs yasm automake libtool autoconf gcc cmake git make pkg-config zlib1g-dev unzip pax nasm gperf autogen bzip2 autoconf-archive p7zip-full clang build-essential git-core libass-dev libfreetype6-dev libgnutls28-dev libmp3lame-dev libsdl2-dev libva-dev libvdpau-dev libvorbis-dev libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev python-is-python3 meson autotools-dev gettext svn makeinfo patch wget xz realpath python3-distutils python-is-python3 -y
          ./cross_compile_ffmpeg.sh \
            --ffmpeg-source-dir=$GITHUB_WORKSPACE/ffmpeg-source \
            --compiler-flavors=win64

      - name: Get current date & time after build
        id: date-time-after
        run: |
          echo date-time=$(date +'%Y-%m-%d %H:%M') >> $GITHUB_OUTPUT
          echo date-time-tag=$(date +'%Y-%m-%d-%H-%M') >> $GITHUB_OUTPUT
          
      - name: Upload FFmpeg binaries
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ matrix.os }}
          path: |
            ffmpeg-source/ffmpeg.exe
            ffmpeg-source/ffprobe.exe
            ffmpeg-source/ffplay.exe
          if-no-files-found: error
          retention-days: ${{ inputs.no_release && '0' || '1' }}

    outputs:
      date-time-after: ${{ steps.date-time-after.outputs.date-time }}
      date-time-after-tag: ${{ steps.date-time-after.outputs.date-time-tag }}

  archive:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download FFmpeg binaries
        uses: actions/download-artifact@v4
        with:
          name: ffmpeg-${{ matrix.os }}

      - name: Create LICENSE
        run: |
          echo "This version of ffmpeg has nonfree parts compiled in." >> LICENSE
          echo "Therefore it is not legally redistributable." >> LICENSE
          
      - name: Compress binaries
        run: 7z a -mx9 ffmpeg-${{ needs.check.outputs.git-sha-short }}-${{ matrix.os }}.7z ff*.exe LICENSE

      - name: Upload FFmpeg archive
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-archive-${{ matrix.os }}
          path: ffmpeg-${{ needs.check.outputs.git-sha-short }}-${{ matrix.os }}.7z

  release:
    needs: archive
    if: "! inputs.no_release"
    runs-on: ubuntu-latest
    steps:
      - name: Download FFmpeg archives
        uses: actions/download-artifact@v4
        with:
          name: ffmpeg-archive-${{ matrix.os }}

      - name: Create GitHub release
        run: |
          gh release create \
          "${{ needs.build.outputs.date-time-after-tag }}-${{ needs.check.outputs.git-sha-short }}" \
          ffmpeg-${{ needs.check.outputs.git-sha-short }}-${{ matrix.os }}.7z \
          -t "${{ needs.build.outputs.date-time-after }}" \
          -n "FFmpeg built on ${{ needs.build.outputs.date-time-after }}."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}