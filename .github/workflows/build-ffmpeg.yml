name: Build FFmpeg
on:
  schedule:
    - cron: '7 11 * * 0'
  workflow_dispatch:
    inputs:
      force_build:
        description: Disable checking for newer commit
        type: boolean
      no_release:
        description: Don't create release
        type: boolean
      use_own_fork:
        description: Use own ffmpeg-windows-build-helpers fork
        type: boolean
  watch:
    types: [started]
concurrency:
  group: ${{ github.workflow }}
  
jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Get FFmpeg latest commit
        id: ffmpeg-info
        run: |
          git_sha=$(gh api repos/FFmpeg/FFmpeg/commits/master -q .sha)
          echo git-sha=$git_sha >> $GITHUB_OUTPUT
          echo git-sha-short=${git_sha::7} >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.TOKEN_REPO }}
          
      - name: Get ${{ inputs.use_own_fork && github.repository_owner || 'xdeadboy666x' }}/ffmpeg-windows-build-helpers latest commit
        id: ffmpeg-helper-info
        run: |
          git_owner=${{ inputs.use_own_fork && github.repository_owner || 'xdeadboy666x' }}
          git_sha=$(gh api repos/$git_owner/ffmpeg-windows-build-helpers/commits/master -q .sha)
          echo git-owner=$git_owner >> $GITHUB_OUTPUT
          echo git-sha=$git_sha >> $GITHUB_OUTPUT
          echo git-sha-short=${git_sha::7} >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.TOKEN_REPO }}
          
      - name: Get ffmpeg-autobuild latest build
        id: ffmpeg-autobuild-info
        run: |
          tag_name=$(gh api repos/$GITHUB_REPOSITORY/releases/latest -q .tag_name)
          echo git-sha=${tag_name:17:7} >> $GITHUB_OUTPUT
          echo helper-git-sha=${tag_name:25:7} >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.TOKEN_REPO }}
          
      - name: Check if there is newer commit
        if: '! inputs.force_build'
        run: >
          [[ "${{ steps.ffmpeg-info.outputs.git-sha-short }}" != "${{ steps.ffmpeg-autobuild-info.outputs.git-sha }}" ]] ||
          [[ "${{ steps.ffmpeg-helper-info.outputs.git-sha-short }}" != "${{ steps.ffmpeg-autobuild-info.outputs.helper-git-sha }}" ]]
          
    outputs:
      git-sha: ${{ steps.ffmpeg-info.outputs.git-sha }}
      git-sha-short: ${{ steps.ffmpeg-info.outputs.git-sha-short }}
      helper-git-owner: ${{ steps.ffmpeg-helper-info.outputs.git-owner }}
      helper-git-sha: ${{ steps.ffmpeg-helper-info.outputs.git-sha }}
      helper-git-sha-short: ${{ steps.ffmpeg-helper-info.outputs.git-sha-short }}

  build:
    needs: check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [win64]
        
    steps:
      - name: Checkout ${{ needs.check.outputs.helper-git-owner }}/ffmpeg-windows-build-helpers
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.check.outputs.helper-git-owner }}/ffmpeg-windows-build-helpers
          ref: ${{ needs.check.outputs.helper-git-sha }}
          persist-credentials: false
          
      - name: Checkout FFmpeg
        uses: actions/checkout@v4
        with:
          repository: FFmpeg/FFmpeg
          ref: ${{ needs.check.outputs.git-sha }}
          persist-credentials: false
          path: ffmpeg-source

      - name: Get current FFmpeg git date
        id: git-date
        working-directory: ffmpeg-source
        run: |
          echo git-date=$(git log -1 --format=%ci) >> $GITHUB_OUTPUT
        
      - name: Get current date & time before build
        id: date-time-before
        run: |
          echo date-time=$(date +'%Y-%m-%d %H:%M') >> $GITHUB_OUTPUT
      
      - name: Download and Build Cross Compiler
        run: |
          download_gcc_build_script() {
            local zeranoe_script_name=$1
            rm -f $zeranoe_script_name || exit 1
            curl -4 file://$patch_dir/$zeranoe_script_name -O --fail || exit 1
            chmod u+x $zeranoe_script_name
          }

          install_cross_compiler() {
            local win64_gcc="cross_compilers/mingw-w64-x86_64/bin/x86_64-w64-mingw32-gcc"
            if [[ -f $win64_gcc ]]; then
              echo "MinGW-w64 compilers both already installed, not re-installing..."
              if [[ -z $compiler_flavors ]]; then
                echo "selecting multi build (both win32 and win64)...since both cross compilers are present assuming you want both..."
                compiler_flavors=win64
              fi
              return
            fi

            if [[ -z $compiler_flavors ]]; then
              pick_compiler_flavors
            fi
            if [[ $compiler_flavors == "native" ]]; then
              echo "native build, not building any cross compilers..."
              return
            fi

            mkdir -p cross_compilers
            cd cross_compilers || exit 

            unset CFLAGS 
            local zeranoe_script_name=mingw-w64-build-r22.local
            local zeranoe_script_options="--gcc-ver=10.2.0 --mingw-w64-ver=9.0.0 --default-configure --cpu-count=$gcc_cpu_count --disable-shared --clean-build --verbose --allow-overwrite --threads=winpthreads" 
            if [[ ($compiler_flavors == "win32" || $compiler_flavors == "multi") && ! -f ../$win32_gcc ]]; then
              echo "Building win32 cross compiler..."
              download_gcc_build_script $zeranoe_script_name
              if [[ uname =~ "5.1" ]]; then 
                sed -i "s/ --enable-secure-api//" $zeranoe_script_name
              fi
              CFLAGS=-O2 CXXFLAGS=-O2 nice ./$zeranoe_script_name $zeranoe_script_options --build-type=win32 || exit 1
              if [[ ! -f ../$win32_gcc ]]; then
                echo "Failure building 32 bit gcc?"
                exit 1
              fi
            fi
            if [[ ($compiler_flavors == "win64" || $compiler_flavors == "multi") && ! -f ../$win64_gcc ]]; then
              echo "Building win64 x86_64 cross compiler..."
              download_gcc_build_script $zeranoe_script_name
              CFLAGS=-O2 CXXFLAGS=-O2 nice ./$zeranoe_script_name $zeranoe_script_options --build-type=win64 || exit 1
              if [[ ! -f ../$win64_gcc ]]; then
                echo "Failure building 64 bit gcc?"
                exit 1
              fi
            fi

            cd ..
            echo "Done building (or already built) MinGW-w64 cross-compiler(s) successfully..."
          }
          
          install_cross_compiler

      - name: Cache MinGW-w64 cross-compilers
        uses: actions/cache@v4
        with:
          path: /home/runner/work/ffmpeg-autobuild/ffmpeg-autobuild/sandbox/cross_compilers/pkgs/binutils/build/x86_64-w64-mingw32/
          key: ${{ runner.os }}-mingw-w64-cross-compilers-${{ hashFiles('**/sandbox/cross_compilers/pkgs/binutils/build/x86_64-w64-mingw32/**/*') }}
          restore-keys: |
            ${{ runner.os }}-mingw-w64-cross-compilers-


      - name: Dependencies
        run: |
          pip3 install setuptools meson ninja --upgrade && sudo apt update -qq && sudo apt-get install -qq -y libpng-dev libunistring-dev libaom-dev libdav1d-dev subversion ragel cvs yasm pax nasm

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache GCC Build Script
        id: cache-gcc-build-script
        uses: actions/cache@v4
        with:
          path: |
            cross_compilers/mingw-w64-i686/bin/i686-w64-mingw32-gcc
            cross_compilers/mingw-w64-x86_64/bin/x86_64-w64-mingw32-gcc
          key: ${{ runner.os }}-gcc-build-script-${{ hashFiles('cross_compile_ffmpeg.sh') }}
      
      - name: Download GCC Build Script
        run: |
          zeranoe_script_name=mingw-w64-build-r22.local
          curl -4 file://$patch_dir/$zeranoe_script_name -O --fail || exit 1
          chmod u+x $zeranoe_script_name
        if: steps.cache-gcc-build-script.outputs.cache-hit != 'true'

      - name: Compile FFmpeg ${{ needs.check.outputs.git-sha-short }} using ffmpeg-windows-build-helpers ${{ needs.check.outputs.helper-git-sha-short }}
        run: |
          bash ./cross_compile_ffmpeg.sh --ffmpeg-source-dir=$GITHUB_WORKSPACE/ffmpeg-source --gcc-cpu-count=$(nproc) --disable-nonfree=n --sandbox-ok=y --compiler-flavors=${{ matrix.os }}

      - name: Get current date & time after build
        id: date-time-after
        run: |
          echo date-time=$(date +'%Y-%m-%d %H:%M') >> $GITHUB_OUTPUT
          echo date-time-tag=$(date +'%Y-%m-%d-%H-%M') >> $GITHUB_OUTPUT
          
      - name: Upload FFmpeg binaries
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ matrix.os }}
          path: |
            ffmpeg-source/ffmpeg.exe
            ffmpeg-source/ffprobe.exe
            ffmpeg-source/ffplay.exe
          if-no-files-found: error
          retention-days: ${{ inputs.no_release && '0' || '1' }}
          
    outputs:
      date-time-before: ${{ steps.date-time-before.outputs.date-time }}
      date-time-after: ${{ steps.date-time-after.outputs.date-time }}
      date-time-after-tag: ${{ steps.date-time-after.outputs.date-time-tag }}
      git-date: ${{ steps.git-date.outputs.git-date }}

  archive:
    permissions:
      id-token: write
      attestations: write
    needs: [check, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [win64]

    steps:
      - name: Download FFmpeg binaries
        uses: actions/download-artifact@v4
        with:
          name: ffmpeg-${{ matrix.os }}

      - name: Create LICENSE
        run: |
          echo "This version of ffmpeg has nonfree parts compiled in." >> LICENSE
          echo "Therefore it is not legally redistributable." >> LICENSE
          
      - name: Generate artifact attestation for FFmpeg binaries
        if: '! inputs.no_release'
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: ff*.exe

      - name: 7-Zip FFmpeg binaries
        run: 7z a -mx9 ffmpeg-${{ needs.check.outputs.git-sha-short }}-${{ needs.check.outputs.helper-git-sha-short }}-${{ matrix.os }}-nonfree.7z ff{mpeg,probe,play}.exe LICENSE

      - name: Generate artifact attestation for FFmpeg archive
        if: '! inputs.no_release'
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: ffmpeg-${{ needs.check.outputs.git-sha-short }}-${{ needs.check.outputs.helper-git-sha-short }}-${{ matrix.os }}-nonfree.7z

      - name: Upload FFmpeg archive
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-archive-${{ matrix.os }}
          path: ffmpeg-${{ needs.check.outputs.git-sha-short }}-${{ needs.check.outputs.helper-git-sha-short }}-${{ matrix.os }}-nonfree.7z
          retention-days: ${{ inputs.no_release && '0' || '1' }}
          compression-level: 0
  release:
    needs: [check, build, archive]
    if: '! inputs.no_release'
    runs-on: ubuntu-latest
    steps:
      - name: Download FFmpeg archives
        uses: actions/download-artifact@v4
        with:
          pattern: ffmpeg-archive-*
          merge-multiple: true

      - name: Release FFmpeg archives
        run: |
          gh release create "${{ needs.build.outputs.date-time-after-tag }}-${{ needs.check.outputs.git-sha-short }}-${{ needs.check.outputs.helper-git-sha-short }}" \
          ffmpeg-${{ needs.check.outputs.git-sha-short }}-${{ needs.check.outputs.helper-git-sha-short }}-win64-nonfree.7z \
          -n "FFmpeg nonfree git-${{ needs.check.outputs.git-sha }} in ${{ needs.build.outputs.git-date }} built on ${{ needs.build.outputs.date-time-after }} started at ${{ needs.build.outputs.date-time-before }}
          Using ${{ needs.check.outputs.helper-git-owner }}/ffmpeg-windows-build-helpers git-${{ needs.check.outputs.helper-git-sha }}" \
          -t "${{ needs.build.outputs.date-time-after }} ${{ needs.check.outputs.git-sha-short }}"
        env:
          GH_TOKEN: ${{ secrets.TOKEN_REPO }}
          GH_REPO: ${{ github.repository }}
